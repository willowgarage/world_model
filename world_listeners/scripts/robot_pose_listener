#!/usr/bin/env python

'''
The robot_pose_listener node listens to a specified Pose message from the robot_pose_publisher
and updates the world model accordingly.

@author:  Russell Toris
@version: January 17, 2013
'''

import rospy
from world_msgs.srv import UpdateWorldModel, WorldModelEntityFrameIdSearch
from world_msgs.msg import WorldModelEntity, WorldModelRelationship, WorldModelObservation
from geometry_msgs.msg import Pose, PoseWithCovarianceStamped

def pose_cb(message, args):
    '''
    Main callback for a pose topic. This will insert a new entity in the world model
    or update an existing entity if one exists assuming the robot's map parent frame.
    
    @param message: the ROS message for the pose
    @type  message: Pose
    @param args: the topic name we are listening on and name-space for this node
    @type  topic: dict
    '''
    entity = WorldModelEntity()
    
    # break up the message and store it
    entity.frame_id = args['ns'] + '_pose'
    
    entity.pose.pose.pose = message
    entity.pose.header.frame_id = args['ns'] + '_map'
    entity.pose.header.stamp = rospy.get_rostime()
    
    rel = WorldModelRelationship()
    rel.header.frame_id = args['ns'] + '_map'
    rel.header.stamp = rospy.get_rostime()
    rel.rel = 'in'
    entity.relationships.append(rel)
    
    observation = WorldModelObservation()
    observation.type = 'topic'
    observation.ref = args['topic']
    entity.observations.append(observation)
    
    entity.tags.append('robot')
    entity.tags.append(args['ns'])

    # create a handle and do the update
    update_world = rospy.ServiceProxy('/world_model/update_world_model', UpdateWorldModel)
    update_world(entity)
    
    # don't update so quickly
    rospy.sleep(1.0)

def main():
    '''
    The main run function for the robot_pose_listener node.
    '''
    rospy.init_node('robot_pose_listener')
    # wait for the world model node
    rospy.loginfo('Waiting for /world_model/update_world_model to become available...')
    rospy.wait_for_service('/world_model/update_world_model')
    rospy.loginfo('Waiting for /world_model/search_world_model_entity_by_frame_id to become available...')
    rospy.wait_for_service('/world_model/search_world_model_entity_by_frame_id')
    
    # check for a topic to listen on
    t = rospy.get_param('~topic', '/robot_pose')
    ns = rospy.get_param('~ns', 'my_robot')
    
    # check for an initial pose for this robot
    search = rospy.ServiceProxy('/world_model/search_world_model_entity_by_frame_id', WorldModelEntityFrameIdSearch)
    resp = search(ns + '_pose')
    # check if we should send in an initial pose
    if resp.exists:
        pub = rospy.Publisher('/initialpose', PoseWithCovarianceStamped)
        resp.entity.pose.header.frame_id = '/map'
        # wait for the pose messages to become available so we know the localization node is up
        rospy.wait_for_message(t, Pose)
        # wait for someone to hear it
        while pub.get_num_connections() < 1 and not rospy.is_shutdown():
            rospy.sleep(0.1)
        pub.publish(resp.entity.pose)

    # subscribe to the topic
    rospy.Subscriber(t, Pose, pose_cb, {'topic' : t, 'ns' : ns})
    
    rospy.loginfo('Robot Pose Listener is Ready!')
    rospy.spin()

if __name__ == '__main__':
    main()
