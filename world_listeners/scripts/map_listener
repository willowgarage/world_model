#!/usr/bin/env python

'''
The map_listener node listens to a specified OccupancyGrid message and updates the world model
accordingly.

@author:  Russell Toris
@version: January 23, 2013
'''

import rospy
from nav_msgs.msg import OccupancyGrid
from world_msgs.srv import *
from world_msgs.msg import WorldObjectInstance
import socket

def map_cb(message, args):
    '''
    Main callback for a map topic. This will insert a new entity in the world object instance 
    database or update an existing entity if one exists with the same tags. 
    
    @param message: the ROS message for the map
    @type  message: OccupancyGrid
    @param args: name-space for this node
    @type  topic: dict
    '''
    # break up the message and store it
    instance = WorldObjectInstance()

    # source information for this node
    instance.source.origin = socket.gethostname()
    instance.source.creator = 'map_listener'
    
    # position information
    instance.pose.pose.pose = message.info.origin
    
    instance.tags = ['map', args['ns']]
    
    # check if we already have a map
    search = rospy.ServiceProxy('/world_model/search_world_object_instance_tags',
                                WorldObjectInstanceTagSearch)
    resp = search(instance.tags)
    if(len(resp.instances) > 0):
        # check if we only found one (which should be the case)
        if(len(resp.instances) > 1):
            rospy.logwarn('Multiple world object instances tagged with "map" and "' + ns + 
                          '". Defaulting to first result.')
        # create a handle and do the update
        update = rospy.ServiceProxy('/world_model/update_world_object_instance',
                                    UpdateWorldObjectInstance)
        update(resp.instances[0].instance_id, instance)
    else:
        # new instance
        instance.name = args['ns'] + ' Map'
        # maps usually last a long time (on year)
        instance.expected_ttl = rospy.Duration(60 * 60 * 24 * 356)
    
        # create a handle and do the creation
        create = rospy.ServiceProxy('/world_model/create_world_object_instance',
                                    CreateWorldObjectInstance)
        create(instance)

def main():
    '''
    The main run function for the map_listener node.
    '''
    rospy.init_node('map_listener')
    # wait for the world model node
    rospy.loginfo('Waiting for /world_model/create_world_object_instance to become available...')
    rospy.wait_for_service('/world_model/create_world_object_instance')
    rospy.loginfo('Waiting for /world_model/update_world_object_instance to become available...')
    rospy.wait_for_service('/world_model/update_world_object_instance')
    rospy.loginfo('Waiting for /world_model/search_world_object_instance_tags to become available...')
    rospy.wait_for_service('/world_model/search_world_object_instance_tags')
    
    # check for a topic to listen on
    t = rospy.get_param('~topic', '/map')
    ns = rospy.get_param('~ns', 'my_robot')
    
    # subscribe to the topic with a queue size of 1
    rospy.Subscriber(t, OccupancyGrid, map_cb, {'ns' : ns}, 1)
    

    rospy.loginfo('Map Listener is Ready!')
    rospy.spin()


if __name__ == '__main__':
    main()
