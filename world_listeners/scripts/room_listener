#!/usr/bin/env python

'''
The room_listener node listens for PolygonWithPose messages and tags them as rooms
inside the namespace's internal map.

@author:  Russell Toris
@version: January 17, 2013
'''

import rospy
from world_msgs.srv import UpdateWorldModel, WorldModelEntityFrameIdSearch
from world_msgs.msg import WorldModelEntity, WorldModelObservation, PolygonWithPose, WorldModelRelationship

def polygon_cb(message, args):
    '''
    Main callback for a polygon with pose topic. This will insert a new entity in the world model
    assuming the robot's map parent frame and tag it as a room.
    
    @param message: the ROS message for the pose
    @type  message: Pose
    @param args: the topic name we are listening on and name-space for this node
    @type  topic: dict
    '''
    # we need to check the counter number for this room
    counter = 0
    while True:
        search = rospy.ServiceProxy('/world_model/search_world_model_entity_by_frame_id', WorldModelEntityFrameIdSearch)
        resp = search(args['ns'] + '_room_' + str(counter))
        if not resp.exists:
            break
        else:
            counter += 1
    
    entity = WorldModelEntity()
    # break up the message and store it
    entity.frame_id = args['ns'] + '_room_' + str(counter)
    
    entity.pose.pose.pose = message.pose
    entity.pose.header.frame_id = args['ns'] + '_map'
    entity.pose.header.stamp = rospy.get_rostime()
    
    rel = WorldModelRelationship()
    rel.header.frame_id = args['ns'] + '_map'
    rel.header.stamp = rospy.get_rostime()
    rel.rel = 'in'
    entity.relationships.append(rel)

    entity.description.polygon = message.polygon
    
    observation = WorldModelObservation()
    observation.type = 'topic'
    observation.ref = args['topic']
    entity.observations.append(observation)
    
    entity.tags.append('room')
    entity.tags.append(args['ns'])

    # create a handle and do the update
    update_world = rospy.ServiceProxy('/world_model/update_world_model', UpdateWorldModel)
    update_world(entity)

def main():
    '''
    The main run function for the room_listener node.
    '''
    rospy.init_node('room_listener')
    # wait for the world model node
    rospy.loginfo('Waiting for /world_model/update_world_model to become available...')
    rospy.wait_for_service('/world_model/update_world_model')
    rospy.loginfo('Waiting for /world_model/search_world_model_entity_by_frame_id to become available...')
    rospy.wait_for_service('/world_model/search_world_model_entity_by_frame_id')
    
    # check for a topic to listen on
    t = rospy.get_param('~topic', '/rooms')
    ns = rospy.get_param('~ns', 'my_robot')

    # subscribe to the topic
    rospy.Subscriber(t, PolygonWithPose, polygon_cb, {'topic' : t, 'ns' : ns})
    
    rospy.loginfo('Room Listener is Ready!')
    rospy.spin()

if __name__ == '__main__':
    main()
