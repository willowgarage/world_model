#!/usr/bin/env python

'''
The robot_listener node listens to a specified Pose message from the robot_pose_publisher
and updates the world model accordingly.

@author:  Russell Toris
@version: January 17, 2013
'''

import rospy
from world_msgs.srv import UpdateWorldModel, WorldModelEntityNameSearch
from world_msgs.msg import WorldModelEntity, WorldModelPose, WorldModelObservation
from geometry_msgs.msg import Pose, PoseWithCovarianceStamped

def pose_cb(message, args):
    '''
    Main callback for a pose topic. This will insert a new entity in the world model
    or update an existing entity if one exists assuming the /map parent frame.
    
    @param message: the ROS message for the pose
    @type  message: Pose
    @param args: the topic name we are listening on and name-space for this node
    @type  topic: dict
    '''
    entity = WorldModelEntity()
    
    # break up the message and store it
    entity.name = args['ns']
    entity.timestamp =  rospy.get_rostime()
    
    pose = WorldModelPose()
    pose.tf.translation.x = message.position.x
    pose.tf.translation.y = message.position.y
    pose.tf.translation.z = message.position.z
    pose.tf.rotation.x = message.orientation.x
    pose.tf.rotation.y = message.orientation.y
    pose.tf.rotation.z = message.orientation.z
    pose.tf.rotation.w = message.orientation.w
    pose.ref = args['ns'] + '-map'
    pose.rel = 'in'
    entity.poses.append(pose)
    
    observation = WorldModelObservation()
    observation.topic = args['topic']
    entity.observations.append(observation)
    
    entity.tags.append('robot')

    # create a handle and do the update
    update_world = rospy.ServiceProxy('/update_world_model', UpdateWorldModel)
    update_world(entity)
    
    # don't update so quickly
    rospy.sleep(1.0)

def main():
    '''
    The main run function for the robot_listener node.
    '''
    rospy.init_node('robot_listener')
    # wait for the world model node
    rospy.loginfo('Waiting for /update_world_model to become available...')
    rospy.wait_for_service('/update_world_model')
    rospy.loginfo('Waiting for /search_world_model_entity_by_name to become available...')
    rospy.wait_for_service('/search_world_model_entity_by_name')
    
    # check for a topic to listen on
    t = rospy.get_param('~topic', '/robot_pose')
    ns = rospy.get_param('~ns', 'robot')
    
    # check for an initial pose for this robot
    search = rospy.ServiceProxy('/search_world_model_entity_by_name', WorldModelEntityNameSearch)
    resp = search(ns)
    # check if we should send in an initial pose
    if resp.exists:
        pub = rospy.Publisher('/initialpose', PoseWithCovarianceStamped)
        pose = PoseWithCovarianceStamped()
        pose.header.seq = 1
        pose.header.frame_id = '/map'
        for p in resp.entity.poses:
            if p.ref == ns + '-map':
                pose.pose.pose.position.x = p.tf.translation.x
                pose.pose.pose.position.y = p.tf.translation.y
                pose.pose.pose.position.z = p.tf.translation.z
                pose.pose.pose.orientation.x = p.tf.rotation.x
                pose.pose.pose.orientation.y = p.tf.rotation.y
                pose.pose.pose.orientation.z = p.tf.rotation.z
                pose.pose.pose.orientation.w = p.tf.rotation.w
        # wait for someone to hear it
        while pub.get_num_connections() < 1 and not rospy.is_shutdown():
            rospy.sleep(0.1)
        pub.publish(pose)

    # subscribe to the topic
    rospy.Subscriber(t, Pose, pose_cb, {'topic' : t, 'ns' : ns})
    
    rospy.loginfo('Pose Listener is Ready!')
    rospy.spin()

if __name__ == '__main__':
    main()
